import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;
import java.util.Comparator;


public class newBot  {

	private Word word = new Word();
	private String letters;
	private int firstWord = 0;
	char bestSq = ' ';
	int bestTileiCoordinate = 0;
	int bestTilejCoordinate = 0;
	
	newBot () {
		word.setWord(0, 0, Word.HORIZONTAL, "HELLO");
		letters = "XYZ";
	}
	
//public static int getCommand (Player player, Board board, Dictionary dictionary, Frame frame) throws FileNotFoundException {
		
		
		
		// make a decision on the play here
				// use board.getSqContents to check what is on the board
				// use Board.SQ_VALUE to check the multipliers
				// use frame.getAllTiles to check what letters you have
				// return the corresponding commandCode from UI
				// if a play, put the start position and letters into word
				// if an exchange, put the characters into letters
	//	}
	
	public int getCommand (Player player, Board board, Dictionary dictionary) throws FileNotFoundException, ArrayIndexOutOfBoundsException {
		long start = System.currentTimeMillis();
		ArrayList<String> dictionaryPasser = new ArrayList<String>();
		ArrayList<String> permList = new ArrayList<String>();
		String frameString ="";
		int bestSqScore =0;
		for(int i=0;i<player.getFrame().size();i++){
			frameString = frameString + player.getFrame().getTile(i).getFace();
		}
		System.out.println(frameString);
		if(!board.isFirstPlay()){
			for(int i=0;i<15;i++){
				for(int j=0;j<15;j++){
					if(board.getSqContents(i, j)!=' '){
						 Tile tempSq = new Tile(board.getSqContents(i, j)); 
						if(bestSqScore < tempSq.getValue()){
							bestSq = tempSq.getFace();
							bestSqScore = tempSq.getValue();
							bestTileiCoordinate = i;
							bestTilejCoordinate = j;
						}
					}
				}
			}
			frameString = frameString + bestSq;
		}
					Set<String> s = this.generatePerm(frameString);
					String perms = s.toString();
					String[] overallArray = perms.split(", ");
					overallArray[0] = overallArray[0].substring(1);
					overallArray[overallArray.length-1] = overallArray[overallArray.length-1].replaceAll("]", "");
					for(int i=0;i<overallArray.length-1;i++){
						permList.add(overallArray[i]);
					}
					int x=0;
					while(x<7){
						for(int i=0;i<overallArray.length-1;i++){
							int w = permList.size()-1;
							if(overallArray[i].substring(x).length()>3){
								permList.add(overallArray[i].substring(x));
							}
						}
						x++;
				for(int i=0;i<permList.size()-1;i++){
					dictionaryPasser.add(permList.get(i));
					if(!dictionary.areWords(dictionaryPasser)){
						dictionaryPasser.remove(permList.get(i));
					}
				}
				long end = System.currentTimeMillis();
				//System.out.println(end-start);
			}
					Set<String> set = new HashSet<String>(dictionaryPasser);
					Word temp = this.findBestWord(set, board, player);
					if(temp!=null){
						word = temp;
						return UI.COMMAND_PLAY;
					}
					else{
						return UI.COMMAND_PASS;
					}
		}
	public Word findBestWord(Set<String> set, Board board, Player player) {
		boolean WordCanBePlaced = false;
		ArrayList<String> bestList = new ArrayList<String>();
		bestList.addAll(set);
		String longestWord = " ";
		boolean notPlaced = true;
		int x =0;
		int bestScore = 0;
		Word bestWordInQuestion = new Word();
		while(x<bestList.size()-1){
			bestList.remove(longestWord);
			longestWord = bestList.get(0);
			for(int i=0;i<bestList.size()-1;i++){
				if(longestWord.length() < bestList.get(i).length()){
					longestWord = bestList.get(i);
				}
			}
			
			int horVert = 0;
			Word tempWord = new Word();
			if(firstWord == 0 ){
					tempWord.setWord(board.CENTRE,board.CENTRE,0,longestWord);
					if(board.checkWord(tempWord, player.getFrame())==UI.WORD_OK){
						if(bestScore<board.getTotalWordScore(tempWord)){
							bestScore = board.getTotalWordScore(tempWord);
							bestWordInQuestion = tempWord;
							WordCanBePlaced = true;
					}
				}
			}
			else{
				int[] arrayofIndexes = new int[10];
				int count = 0;
				for(int i=0;i<longestWord.length();i++){
					if(longestWord.charAt(i) == bestSq){
						arrayofIndexes[count] = i;
						count++;
					}
				}
				for(int counter = 0;counter<arrayofIndexes.length;counter++){
				while(horVert <= 1){	
				for(int i=0;i<15;i++){	
					for(int j=0;j<15;j++){
						if(horVert == 0){
							int tempjCoordinate = bestTilejCoordinate - arrayofIndexes[counter];
							tempWord.setWord(bestTileiCoordinate ,tempjCoordinate , horVert, longestWord);
						}
						if(horVert == 1){
							int tempiCoordinate = bestTileiCoordinate - arrayofIndexes[counter];
							tempWord.setWord(tempiCoordinate ,bestTilejCoordinate , horVert, longestWord);
						}
						if(board.checkWord(tempWord, player.getFrame()) == UI.WORD_OK){
							if(bestScore < board.getTotalWordScore(tempWord)){
								bestScore = board.getTotalWordScore(tempWord);
								bestWordInQuestion = tempWord;
								WordCanBePlaced = true;
							}
						}
					}
				}
		horVert++;	
				}
				}
			}
			x++;
		}
		firstWord++;
		return bestWordInQuestion;
	}
	public  Word getWord () {
		// should not change
		return(word);
	}
		
	public  String getLetters () {
		// should not change
		return(letters);
	}
	public  Set<String> generatePerm(String input)
	{
	    Set<String> set = new HashSet<String>();
	    if (input == "")
	        return set;

	    Character a = input.charAt(0);

	    if (input.length() > 1)
	    {
	        input = input.substring(1);

	        Set<String> permSet = generatePerm(input);

	        for (String x : permSet)
	        {
	            for (int i = 0; i <= x.length(); i++)
	            {
	                set.add(x.substring(0, i) + a + x.substring(i));
	            }
	        }
	    }
	    else
	    {
	        set.add(a + "");
	    }
	    return set;
	}
}