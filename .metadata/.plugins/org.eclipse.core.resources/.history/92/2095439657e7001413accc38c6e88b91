import java.io.BufferedReader;
import java.io.File;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;


public class Bot {

	private Word word = new Word();
	private String letters;
	
	Bot () {
		word.setWord(0, 0, Word.HORIZONTAL, "HELLO");
		letters = "XYZ";
	}
	
	public int getCommand (Player player, Board board, Dictionary dictionary, Frame frame) {
		String[] arrayOfPerms = new String[100000];
		String[] arrayOfTiles = new String[100];
		int count = 0;
		for(int i=0;i<15;i++){
			for(int j=0;j<15;j++){
				arrayOfTiles[count] = Character.toString(board.getSqContents(i, j)) + i + j + "\n"; //A82\n
				count++;
			}
		}
		count++;
		for(int i =0;i<frame.size();i++){
			arrayOfTiles[count] = Character.toString(frame.getAllTiles().get(i).getFace()) + "\n";
		}
		String stringOfPerms=null;
		for(int i=0;i<arrayOfTiles.length;i++){
			stringOfPerms = stringOfPerms + arrayOfTiles[i].charAt(0);
		}
		String word=null;
		String inputFile = new File("src/sowpods").getAbsolutePath();
		Scanner in = new Scanner(inputFile);
		while (in.hasNextLine()) {
			word = in.nextLine();
		}
		// make a decision on the play here
		// use board.getSqContents to check what is on the board
		// use Board.SQ_VALUE to check the multipliers
		// use frame.getAllTiles to check what letters you have
		// return the corresponding commandCode from UI
		// if a play, put the start position and letters into word
		// if an exchange, put the characters into letters
		return(UI.COMMAND_PASS);
	}
	
	public Word getWord () {
		// should not change
		return(word);
	}
		
	public String getLetters () {
		// should not change
		return(letters);
	}
	public static Set<String> generatePerm(String input)
	{
	    Set<String> set = new HashSet<String>();
	    if (input == "")
	        return set;

	    Character a = input.charAt(0);

	    if (input.length() > 1)
	    {
	        input = input.substring(1);

	        Set<String> permSet = generatePerm(input);

	        for (String x : permSet)
	        {
	            for (int i = 0; i <= x.length(); i++)
	            {
	                set.add(x.substring(0, i) + a + x.substring(i));
	            }
	        }
	    }
	    else
	    {
	        set.add(a + "");
	    }
	    return set;
	}
}
